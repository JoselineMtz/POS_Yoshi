import React, { useState, useEffect } from 'react';
import axios from 'axios';

const SuperStock = () => {
Â  // Usar una clave Ãºnica para el almacenamiento local, como el ID del usuario
Â  const currentUserId = 1;
Â  const localStorageKey = `superstock_temp_products_${currentUserId}`;

Â  // Estado para la lista de categorÃ­as
Â  const [categories, setCategories] = useState([]);
Â  
Â  // Estado para productos agregados a tabla temporal
Â  // Inicializar el estado con datos del localStorage
Â  const [addedProducts, setAddedProducts] = useState(() => {
Â  Â  try {
Â  Â  Â  const storedProducts = localStorage.getItem(localStorageKey);
Â  Â  Â  return storedProducts ? JSON.parse(storedProducts) : [];
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error parsing localStorage data:', error);
Â  Â  Â  return [];
Â  Â  }
Â  });

Â  // Estado para el nuevo producto
Â  const [newProduct, setNewProduct] = useState({ 
Â  Â  sku: '', 
Â  Â  name: '', 
Â  Â  description: '', 
Â  Â  stock: 0, 
Â  Â  stockUnit: 'Unidad', 
Â  Â  categoria_id: null,
Â  Â  price: 0
Â  });

Â  // Estado para producto existente (si coincide SKU)
Â  const [existingProduct, setExistingProduct] = useState(null);

Â  // Estados de calculadora de precios
Â  const [purchasePrice, setPurchasePrice] = useState('');
Â  const [profitPercentage, setProfitPercentage] = useState('');
Â  const [calculatedProfitPercentage, setCalculatedProfitPercentage] = useState('');
Â  const [calculationMode, setCalculationMode] = useState('price');

Â  // Mensajes de estado
Â  const [message, setMessage] = useState(null);

Â  // Modal ver todos
Â  const [showAllProducts, setShowAllProducts] = useState(false);

Â  // Timeout bÃºsqueda SKU
Â  const [searchTimeout, setSearchTimeout] = useState(null);

Â  // ðŸ”¹ Guardar productos en localStorage cada vez que `addedProducts` cambie
Â  useEffect(() => {
Â  Â  localStorage.setItem(localStorageKey, JSON.stringify(addedProducts));
Â  }, [addedProducts, localStorageKey]);

Â  // ðŸ”¹ Traer categorÃ­as al inicio
Â  useEffect(() => {
Â  Â  const fetchCategories = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  const response = await axios.get('http://localhost:4000/api/stock/categories');
Â  Â  Â  Â  setCategories(response.data);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error fetching categories:', error);
Â  Â  Â  }
Â  Â  };
Â  Â  fetchCategories();
Â  }, []);

Â  // ðŸ”¹ Buscar producto por SKU en tabla principal
Â  useEffect(() => {
Â  Â  if (searchTimeout) clearTimeout(searchTimeout);

Â  Â  if (newProduct.sku.trim() !== '') {
Â  Â  Â  const timeout = setTimeout(async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  const response = await axios.get(
Â  Â  Â  Â  Â  Â  `http://localhost:4000/api/stock/products/by-sku/${newProduct.sku}`
Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  const product = response.data;
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  setExistingProduct(product);
Â  Â  Â  Â  Â  setNewProduct(prev => ({
Â  Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  Â  name: product.name,
Â  Â  Â  Â  Â  Â  description: product.description,
Â  Â  Â  Â  Â  Â  stock: 0, 
Â  Â  Â  Â  Â  Â  stockUnit: product.stock_unit,
Â  Â  Â  Â  Â  Â  categoria_id: product.categoria_id,
Â  Â  Â  Â  Â  Â  price: product.price
Â  Â  Â  Â  Â  }));
Â  Â  Â  Â  Â  setPurchasePrice(product.purchase_price);
Â  Â  Â  Â  Â  setMessage({ text: `Producto '${product.name}' encontrado en stock.`, type: 'info' });
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  if (error.response && error.response.status === 404) {
Â  Â  Â  Â  Â  Â  setExistingProduct(null);
Â  Â  Â  Â  Â  Â  setNewProduct(prev => ({
Â  Â  Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  Â  Â  name: '',
Â  Â  Â  Â  Â  Â  Â  description: '',
Â  Â  Â  Â  Â  Â  Â  stock: 0,
Â  Â  Â  Â  Â  Â  Â  categoria_id: null,
Â  Â  Â  Â  Â  Â  Â  price: 0
Â  Â  Â  Â  Â  Â  }));
Â  Â  Â  Â  Â  Â  setPurchasePrice('');
Â  Â  Â  Â  Â  Â  setProfitPercentage('');
Â  Â  Â  Â  Â  Â  setMessage({ text: 'SKU no encontrado, se guardarÃ¡ como producto nuevo en temporal.', type: 'info' });
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  console.error('Error buscando producto:', error);
Â  Â  Â  Â  Â  Â  setMessage({ text: 'Error al buscar producto.', type: 'error' });
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  }, 500);

Â  Â  Â  setSearchTimeout(timeout);
Â  Â  }
Â  }, [newProduct.sku]);

Â  // ðŸ”¹ Calculadora de precios
Â  useEffect(() => {
Â  Â  const price = parseFloat(purchasePrice);
Â  Â  
Â  Â  if (calculationMode === 'price') {
Â  Â  Â  const profit = parseFloat(profitPercentage);
Â  Â  Â  if (!isNaN(price) && !isNaN(profit)) {
Â  Â  Â  Â  const calculatedPrice = price * (1 + profit / 100);
Â  Â  Â  Â  setNewProduct(prev => ({ ...prev, price: calculatedPrice }));
Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  const salePrice = parseFloat(newProduct.price);
Â  Â  Â  if (!isNaN(price) && !isNaN(salePrice) && price > 0) {
Â  Â  Â  Â  const calculatedProfit = ((salePrice - price) / price) * 100;
Â  Â  Â  Â  setCalculatedProfitPercentage(calculatedProfit.toFixed(2));
Â  Â  Â  } else {
Â  Â  Â  Â  setCalculatedProfitPercentage('N/A');
Â  Â  Â  }
Â  Â  }
Â  }, [purchasePrice, profitPercentage, newProduct.price, calculationMode]);

Â  // ðŸ”¹ Guardar en tabla temporal
Â  const handleAddProduct = async () => {
Â  Â  try {
Â  Â  Â  const productData = {
Â  Â  Â  Â  sessionId: `user_${currentUserId}`,
Â  Â  Â  Â  sku: newProduct.sku.trim(),
Â  Â  Â  Â  name: newProduct.name.trim(),
Â  Â  Â  Â  description: newProduct.description.trim(),
Â  Â  Â  Â  stock: parseFloat(newProduct.stock) || 0,
Â  Â  Â  Â  stockUnit: newProduct.stockUnit || 'Unidad',
Â  Â  Â  Â  categoria_id: newProduct.categoria_id || null,
Â  Â  Â  Â  price: parseFloat(newProduct.price) || 0,
Â  Â  Â  Â  added_stock: parseFloat(newProduct.stock) || 0,
Â  Â  Â  Â  purchase_price: parseFloat(purchasePrice) || 0,
Â  Â  Â  Â  user_id: currentUserId
Â  Â  Â  };

Â  Â  Â  // Validar campos clave
Â  Â  Â  if (!productData.sessionId || !productData.sku || !productData.added_stock || !productData.purchase_price) {
Â  Â  Â  Â  setMessage({ text: 'Faltan datos clave para agregar el producto.', type: 'error' });
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  // A diferencia del cÃ³digo original, ahora solo actualizamos el estado local.
Â  Â  Â  // La persistencia en la base de datos se harÃ¡ en 'Finalizar'.
Â  Â  Â  // Para evitar duplicados en la lista local, podrÃ­as buscar y actualizar.
Â  Â  Â  const productExists = addedProducts.find(p => p.sku === productData.sku);
Â  Â  Â  if (productExists) {
Â  Â  Â  Â  setAddedProducts(prev => prev.map(p => 
Â  Â  Â  Â  Â  p.sku === productData.sku ? { ...productData, added_stock: p.added_stock + productData.added_stock } : p
Â  Â  Â  Â  ));
Â  Â  Â  } else {
Â  Â  Â  Â  setAddedProducts(prev => [...prev, productData]);
Â  Â  Â  }

Â  Â  Â  // Resetear campos
Â  Â  Â  setExistingProduct(null);
Â  Â  Â  setNewProduct({ sku: '', name: '', description: '', stock: 0, stockUnit: 'Unidad', categoria_id: null, price: 0 });
Â  Â  Â  setPurchasePrice('');
Â  Â  Â  setProfitPercentage('');
Â  Â  Â  setCalculatedProfitPercentage('');

Â  Â  Â  setMessage({ text: 'Producto agregado a tabla temporal.', type: 'info' });
Â  Â  Â  setTimeout(() => setMessage(null), 3000);

Â  Â  } catch (error) {
Â  Â  Â  console.error('Error agregando producto temporal:', error);
Â  Â  Â  setMessage({ text: 'Error al guardar en temporal.', type: 'error' });
Â  Â  }
Â  };

Â  // ðŸ”¹ Finalizar â†’ mover todo de temp_products a products
Â  const handleFinalizeStock = async () => {
Â  Â  try {
Â  Â  Â  await axios.post('http://localhost:4000/api/stock/finalize', {
Â  Â  Â  Â  sessionId: `user_${currentUserId}`,
Â  Â  Â  Â  products: addedProducts // Enviar todos los productos guardados en el estado
Â  Â  Â  });
Â  Â  Â  setAddedProducts([]); // Limpiar la lista de productos
Â  Â  Â  localStorage.removeItem(localStorageKey); // Limpiar localStorage
Â  Â  Â  setMessage({ text: 'Productos trasladados a Control Stock.', type: 'success' });
Â  Â  Â  setTimeout(() => setMessage(null), 3000);
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error finalizando stock:', error);
Â  Â  Â  setMessage({ text: 'Error al finalizar stock.', type: 'error' });
Â  Â  }
Â  };

Â  const handleSetSuggestedPrice = () => {
Â  Â  if (calculationMode === 'price') {
Â  Â  Â  const suggestedPrice = parseFloat(purchasePrice) * (1 + parseFloat(profitPercentage) / 100);
Â  Â  Â  setNewProduct(prev => ({ ...prev, price: suggestedPrice }));
Â  Â  }
Â  };

Â  return (
Â  Â  <>
Â  Â  Â  <div className="section super-stock-section">
Â  Â  Â  Â  <h3 className="section-title">Registro de Compras (Super Stock)</h3>
Â  Â  Â  Â  <div className="form-container">
Â  Â  Â  Â  Â  <div className="form-card">
Â  Â  Â  Â  Â  Â  <h4>Agregar Nuevo Stock</h4>
Â  Â  Â  Â  Â  Â  {message && (
Â  Â  Â  Â  Â  Â  Â  <div className={`message ${message.type}`}>
Â  Â  Â  Â  Â  Â  Â  Â  {message.text}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  placeholder="SKU"
Â  Â  Â  Â  Â  Â  Â  value={newProduct.sku}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewProduct({ ...newProduct, sku: e.target.value })}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  placeholder="Nombre"
Â  Â  Â  Â  Â  Â  Â  value={newProduct.name}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  placeholder="DescripciÃ³n"
Â  Â  Â  Â  Â  Â  Â  value={newProduct.description}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <div className="input-group">
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Cantidad"
Â  Â  Â  Â  Â  Â  Â  Â  value={newProduct.stock}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewProduct({ ...newProduct, stock: parseFloat(e.target.value) })}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  id="stockUnit"
Â  Â  Â  Â  Â  Â  Â  Â  value={newProduct.stockUnit}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewProduct({ ...newProduct, stockUnit: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="select-unit"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Unidad">Unidad</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Kilo">Kilo</option>
Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  <div className="divider"></div>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <div className="calculation-mode-toggle">
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  className={`mode-button ${calculationMode === 'price' ? 'active' : ''}`}
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setCalculationMode('price')}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Calcular Precio de Venta
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  className={`mode-button ${calculationMode === 'profit' ? 'active' : ''}`}
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setCalculationMode('profit')}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Calcular % de Ganancia
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  placeholder="Precio de Compra"
Â  Â  Â  Â  Â  Â  Â  value={purchasePrice}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setPurchasePrice(e.target.value)}
Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  {calculationMode === 'price' ? (
Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Porcentaje de Ganancia (%)"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={profitPercentage}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setProfitPercentage(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  <p className="suggested-price">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Precio de Venta Sugerido: <strong>${(parseFloat(purchasePrice) * (1 + parseFloat(profitPercentage) / 100)).toFixed(2)}</strong>
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="action-button set-price-button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleSetSuggestedPrice}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Establecer precio sugerido
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Precio de Venta Deseado"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={newProduct.price}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewProduct({ ...newProduct, price: parseFloat(e.target.value) })}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  <p className="suggested-price">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Porcentaje de Ganancia: <strong>{calculatedProfitPercentage}%</strong>
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  <div className="divider"></div>

Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  value={newProduct.categoria_id || ''}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewProduct({ ...newProduct, categoria_id: e.target.value === '' ? null : parseInt(e.target.value) })}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <option value="">Selecciona una categorÃ­a</option>
Â  Â  Â  Â  Â  Â  Â  {categories.map((category) => (
Â  Â  Â  Â  Â  Â  Â  Â  <option key={category.id} value={category.id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {category.nombre}
Â  Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  <button className="add-button" onClick={handleAddProduct}>
Â  Â  Â  Â  Â  Â  Â  {existingProduct ? "Actualizar en Temporal" : "Agregar a Temporal"}
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {addedProducts.length > 0 && (
Â  Â  Â  Â  Â  <div className="added-products-list-container">
Â  Â  Â  Â  Â  Â  <h4>Productos en Temporal</h4>
Â  Â  Â  Â  Â  Â  <ul className="added-products-list">
Â  Â  Â  Â  Â  Â  Â  {addedProducts.slice(0, 4).map((product, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  <li key={index} className="product-list-item">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>SKU:</strong> {product.sku}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Nombre:</strong> {product.name}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Cantidad:</strong> {product.added_stock} {product.stockUnit || product.stock_unit}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Precio:</strong> ${product.price.toFixed(2)}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  {addedProducts.length > 4 && (
Â  Â  Â  Â  Â  Â  Â  <button className="action-button set-price-button" onClick={() => setShowAllProducts(true)}>
Â  Â  Â  Â  Â  Â  Â  Â  Ver todos ({addedProducts.length})
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  <button className="finalize-button" onClick={handleFinalizeStock}>
Â  Â  Â  Â  Â  Â  Â  Finalizar y llevar a Stock
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </div>

Â  Â  Â  {showAllProducts && (
Â  Â  Â  Â  <div className="modal-overlay">
Â  Â  Â  Â  Â  <div className="modal-content">
Â  Â  Â  Â  Â  Â  <button className="modal-close-button" onClick={() => setShowAllProducts(false)}>&times;</button>
Â  Â  Â  Â  Â  Â  <h4>Todos los Productos en Temporal</h4>
Â  Â  Â  Â  Â  Â  <ul className="added-products-list">
Â  Â  Â  Â  Â  Â  Â  {addedProducts.map((product, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  <li key={index} className="product-list-item">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>SKU:</strong> {product.sku}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Nombre:</strong> {product.name}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Cantidad:</strong> {product.added_stock} {product.stockUnit || product.stock_unit}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Precio:</strong> ${product.price.toFixed(2)}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </>
Â  );
};

export default SuperStock;